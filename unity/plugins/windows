<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jukebox</name>
    </assembly>
    <members>
        <member name="T:Jukebox.IPlayCounter">
            <summary>
            Interface for getting basic stats about the currently playing track. The 
            IPlayCounter should be obtained by getting the PlayCounter property from the
            currently playing ITrack, and then discarded after use, as it can become out
            of-date when the playlist changes.
            </summary>
        </member>
        <member name="P:Jukebox.IPlayCounter.TrackDuration">
            <summary>
            Gets the duration of the currently playing track in Seconds
            </summary>
        </member>
        <member name="P:Jukebox.IPlayCounter.PlayedDuration">
            <summary>
            Gets the played duration of the currently playing track in Seconds
            </summary>
        </member>
        <member name="T:Jukebox.ITrack">
            <summary>
            Interface exposing information about tracks sourced from Jukebox
            </summary>
        </member>
        <member name="P:Jukebox.ITrack.Name">
            <summary>
            Gets the name of the track
            </summary>
        </member>
        <member name="P:Jukebox.ITrack.Artist">
            <summary>
            Gets the name of the artist who performed the track
            </summary>
        </member>
        <member name="P:Jukebox.ITrack.ArtistUrl">
            <summary>
            Gets a URL to find out more about the artist who performed the track
            </summary>
        </member>
        <member name="P:Jukebox.ITrack.Album">
            <summary>
            Gets the name of the album on which the track was released
            </summary>
        </member>
        <member name="P:Jukebox.ITrack.Genre">
            <summary>
            Gets the genre for the track
            </summary>
        </member>
        <member name="P:Jukebox.ITrack.Tags">
            <summary>
            Gets any additional text tags that the track has been annotated with
            </summary>
        </member>
        <member name="P:Jukebox.ITrack.TrackImageUrl">
            <summary>
            Gets a URL for an image to represent the track
            </summary>
        </member>
        <member name="P:Jukebox.ITrack.AudioClip">
            <summary>
            Returns the audio clip containing the track
            </summary>
        </member>
        <member name="P:Jukebox.ITrack.IsReady">
            <summary>
            Returns true if the audio clip is ready to play
            </summary>
        </member>
        <member name="P:Jukebox.ITrack.PlayCounter">
            <summary>
            Returns an IPlayCounter reference to get dynamic playback information
            about the current track.
            NOTE: this will only return valid information whilst the current track
            is playing. It should be re-requested for subsequent tracks
            </summary>
        </member>
        <member name="T:Jukebox.NewTrackEventHandler">
            <summary>
            Event delegate that can be registered to events from IPlaylist or IControl
            to be notified when the active track changes
            </summary>
        </member>
        <member name="T:Jukebox.IBehaviourExtension">
            <summary>
            Interface implemented by IPlaylist and IControl. Both of these methods
            should be called from the corresponding methods in the parent MonoBehaviour 
            class to correctly initialize and update the extension objects.
            </summary>
        </member>
        <member name="M:Jukebox.IBehaviourExtension.Start(Jukebox.IUnityBehaviour)">
            <summary>
            Call Start within the parent MonoBehaviour script's Start method, to 
            allow the component to correctly initialize itself.
            </summary>
            <param name="parent">
            The parent script that nominally owns and uses this component
            </param>
        </member>
        <member name="M:Jukebox.IBehaviourExtension.Update">
            <summary>
            Call Update within the parent MonoBehaviour script's Update method, to 
            allow the component to update itself.
            </summary>
        </member>
        <member name="T:Jukebox.IPlaybackControl">
            <summary>
            Interface for accessing and controlling the current track being played by 
            the Jukebox system. This interface is inherited by both IPlaylist and 
            IControl. When multiple playlists are present in a game scene, then the 
            IControl-inherited version of this interface should be used by the wider
            game code, as it co-ordinates playback between each of the individual 
            playlists. If just a single playlist is declared, then that playlist may be 
            used directly.
            </summary>
        </member>
        <member name="P:Jukebox.IPlaybackControl.CurrentTrack">
            <summary>
            Get the currently playing track controlled by this interface.
            </summary>
        </member>
        <member name="M:Jukebox.IPlaybackControl.StartPlayback">
            <summary>
            Start playback of the currently selected track.
            </summary>
        </member>
        <member name="M:Jukebox.IPlaybackControl.PausePlayback">
            <summary>
            Pause the currently playing track.
            </summary>
        </member>
        <member name="M:Jukebox.IPlaybackControl.SkipCurrentTrack">
            <summary>
            Skip the currently playing track and start playing the next track in
            the playlist.
            </summary>
        </member>
        <member name="M:Jukebox.IPlaybackControl.LikeCurrentTrack">
            <summary>
            Send feedback to Jukebox that the user likes the currently 
            playing track.
            </summary>
        </member>
        <member name="M:Jukebox.IPlaybackControl.DislikeCurrentTrack">
            <summary>
            Send feedback to Jukebox that the user dislikes the currently playing
            track.
            Note: this keeps the track playing; SkipCurrentTrack must be called 
            to actually skip tracks.
            </summary>
        </member>
        <member name="M:Jukebox.IPlaybackControl.GoToUserConfigPage">
            <summary>
            Open a user configuration page in the default browser
            </summary>
        </member>
        <member name="E:Jukebox.IPlaybackControl.OnNewTrack">
            <summary>
            The OnNewTrack event fires whenever a new track associated with this 
            interface starts playing.
            </summary>
        </member>
        <member name="T:Jukebox.IPlaylist">
            <summary>
            Interface to access a Jukebox playlist. If a scene contains just a single 
            playlist then this interface may be used to interact with the transport. If 
            multiple playlists are being used then the IControl interface should be used 
            instead to control and query the active playlist.
            </summary>
        </member>
        <member name="T:Jukebox.IUserInfo">
            <summary>
            Interface containing user preference info
            </summary>
        </member>
        <member name="T:Jukebox.OnUserInfoAvailable">
            <summary>
            Event delegate that can be used to be informed when the current user's User Info
            becomes available (i.e. has been downloaded)
            </summary>
        </member>
        <member name="T:Jukebox.IConfig">
            <summary>
            Interface to manage and the current configuration
            </summary>
        </member>
        <member name="P:Jukebox.IConfig.LocalServerOverride">
            <summary>
            Get or Set an override for the server to use
            </summary>
        </member>
        <member name="P:Jukebox.IConfig.DisableCache">
            <summary>
            Get or Set whether the local cache is enabled or not
            </summary>
        </member>
        <member name="P:Jukebox.IConfig.ApplicationKey">
            <summary>
            Get or Set the Application Key for this Unity Application
            </summary>
        </member>
        <member name="P:Jukebox.IConfig.UserConfigUrl">
            <summary>
            Get the URL to navigate to in order to give the user full control over their
            account configuration
            </summary>
        </member>
        <member name="M:Jukebox.IConfig.GetUserInfo(Jukebox.OnUserInfoAvailable)">
            <summary>
            Try to obtain the current user's UserInfo. This is loaded on demand, and
            so may not be immediately available. In this case, notifyWhenAvailable will
            be invoked when the info becomes available.
            </summary>
        </member>
        <member name="M:Jukebox.IConfig.UpdateUserInfo(Jukebox.IUserInfo)">
            <summary>
            Update the user's info on the web service
            </summary>
        </member>
        <member name="T:Jukebox.IControl">
            <summary>
            Interface to manage and query the active playlist in a multi-playlist scene. 
            Setting the 'CurrentPlaylist' property allows the Jukebox component to 
            correctly switch between multiple IPlaylist objects
            </summary>
        </member>
        <member name="P:Jukebox.IControl.CurrentPlaylist">
            <summary>
            Gets and Sets the current playlist. Use of the IControl.CurrentPlaylist 
            set method is the recommended way to switch between active playlists. 
            Assigning a playlist in this manner will automatically start and stop 
            playback across playlists correctly; and ensure the correct metadata is 
            exposed via the IControl's IPlaybackControl methods.
            </summary>
        </member>
        <member name="P:Jukebox.IControl.Config">
            <summary>
            Get the Jukebox config
            </summary>
        </member>
        <member name="T:Jukebox.Factory">
            <summary>
            Factory class for instantiating instances of the IControl and IPlaylist 
            classes
            </summary>
        </member>
        <member name="M:Jukebox.Factory.RegisterUnityServices(Jukebox.IUnityServices)">
            <summary>
            Register an implementation of the required Jukebox Unity services with the
            Jukebox plug-in. A standard implementation of IUnityServices is available
            in the file JukeboxAdapter.cs supplied in the Jukebox SDK
            </summary>
        </member>
        <member name="M:Jukebox.Factory.GetControl">
            <summary>
            Factory method for Jukebox.IControl
            </summary>
            <returns>
            a reference to an instance of the global Jukebox.IControl object
            </returns>
        </member>
        <member name="M:Jukebox.Factory.CreatePlaylist(Jukebox.IUnityAudioSource,System.String,System.Boolean,System.Boolean)">
            <summary>
            Factory method for Jukebox.IPlaylist
            </summary>
            <param name="source">
            The AudioSource object that will receive streamed audio data when this 
            playlist is playing
            </param>
            <param name="playlistToken">
            The textual playlist token generated for this playlist on
            https://www.jukeboxaudio.co 
            </param>
            <param name="shufflePlay">
            If set to true, the order of playback of playlist tracks is randomised
            </param>
            <param name="autoStart">
            If set to true, this playlist will start playing as soon as it is loaded.
            </param>
            <remarks>
            Only one Playlist object in a scene should be initialized with 
            autoStart = true, so only one track begins playing
            </remarks>
            <returns>an instance of a Jukebox.IPlaylist object</returns>
        </member>
        <member name="T:Jukebox.IUnityServices">
            <summary>
            IUnityServices: Top-level interface by which a Unity project exposes the Unity
            platform functionality required by the Jukebox plug-in. A reference to an
            IUnityServices implementation must be passed to Jukebox.Factory.RegisterUnityServices
            prior to any other Jukebox plug-in methods being called. A standard implementation of
            IUnityServices is available in the file JukeboxAdapter.cs supplied in the Jukebox SDK
            </summary>
        </member>
        <member name="M:Jukebox.IUnityServices.CreateWWW(System.String)">
            <summary>
            Create and return an initialized instance of an IUnityWWW implementation
            </summary>
        </member>
        <member name="M:Jukebox.IUnityServices.CreateWWW(System.String,System.Byte[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create and return an initialized instance of an IUnityWWW implementation
            </summary>
        </member>
        <member name="P:Jukebox.IUnityServices.Application">
            <summary>
            Return an instance of an IUnityApplication object
            </summary>
        </member>
        <member name="P:Jukebox.IUnityServices.Json">
            <summary>
            Return an instance of an IUnityJson object
            </summary>
        </member>
        <member name="P:Jukebox.IUnityServices.Debug">
            <summary>
            Return an instance of an IUnityDebug object
            </summary>
        </member>
        <member name="T:Jukebox.IUnityWWW">
            <summary>
            IUnityWWW: an object implementing this interface provides a set of Web Request
            services to allow clients to request resources from the Web or the local device;
            monitor the request status, and then process the response.
            
            </summary>
        </member>
        <member name="P:Jukebox.IUnityWWW.isDone">
            <summary>
            Returns true if this request is finished
            </summary>
        </member>
        <member name="P:Jukebox.IUnityWWW.error">
            <summary>
            Returns an error string if this request has failed
            </summary>
        </member>
        <member name="P:Jukebox.IUnityWWW.url">
            <summary>
            Returns the URL for this request
            </summary>
        </member>
        <member name="P:Jukebox.IUnityWWW.progress">
            <summary>
            Returns a float between 0.0 and 1.0 signifying the progress of this request
            </summary>
        </member>
        <member name="P:Jukebox.IUnityWWW.bytes">
            <summary>
            Returns the response data as raw bytes
            </summary>
        </member>
        <member name="P:Jukebox.IUnityWWW.text">
            <summary>
            Returns the response data as text
            </summary>
        </member>
        <member name="M:Jukebox.IUnityWWW.GetAudioClip(System.Boolean,Jukebox.UnityAudioType)">
            <summary>
            Returns the response data as an IUnityAudioClip
            </summary>
        </member>
        <member name="T:Jukebox.IUnityApplication">
            <summary>
            IUnityApplication: an object implementing this interface provides a set of 
            application-level functions and properties
            </summary>
        </member>
        <member name="P:Jukebox.IUnityApplication.persistentDataPath">
            <summary>
            Returns the persistent data storage path for this application
            </summary>
        </member>
        <member name="P:Jukebox.IUnityApplication.deviceUniqueIdentifier">
            <summary>
            Returns a unique identifier for this device
            </summary>
        </member>
        <member name="P:Jukebox.IUnityApplication.deviceType">
            <summary>
            Returns a string indicating the device type
            </summary>
        </member>
        <member name="M:Jukebox.IUnityApplication.EscapeURL(System.String)">
            <summary>
            Escaped the provided string to make it URL-safe
            </summary>
        </member>
        <member name="M:Jukebox.IUnityApplication.WaitForSeconds(System.Single)">
            <summary>
            Creates and returns a 'WaitForSeconds' object to tell a listening Unity
            scheduler to suspend this task for the given number (or fraction) of seconds
            </summary>
        </member>
        <member name="P:Jukebox.IUnityApplication.platformAudioType">
            <summary>
            Returns the required audio type for this platform
            </summary>
        </member>
        <member name="P:Jukebox.IUnityApplication.FrameTime">
            <summary>
            Returns the current frame time, in seconds, since the renderer was started
            </summary>
        </member>
        <member name="T:Jukebox.IUnityJson">
            <summary>
            IUnityJson: an object providing this interface implements functions for 
            converting object to and from a JSON representation
            </summary>
        </member>
        <member name="M:Jukebox.IUnityJson.FromJson``1(System.String)">
            <summary>
            Implement an object from its JSON representation
            </summary>
        </member>
        <member name="M:Jukebox.IUnityJson.ToJson(System.Object)">
            <summary>
            Convert an object to its JSON representation
            </summary>
        </member>
        <member name="T:Jukebox.IUnityDebug">
            <summary>
            IUnityDebug: an object providing this interface implements a set of Debug reporting
            functions that display debug information in the Unity debug console
            </summary>
        </member>
        <member name="M:Jukebox.IUnityDebug.LogError(System.Object)">
            <summary>
            Log an error message
            </summary>
        </member>
        <member name="M:Jukebox.IUnityDebug.LogWarning(System.Object)">
            <summary>
            Log a warning message
            </summary>
        </member>
        <member name="M:Jukebox.IUnityDebug.Log(System.Object)">
            <summary>
            Log some information
            </summary>
        </member>
        <member name="T:Jukebox.IUnityBehaviour">
            <summary>
            IUnityBehaviour: an object implementing this interface exposes functionality
            for scheduling Co-Routines within the Unity scheduling system
            </summary>
        </member>
        <member name="M:Jukebox.IUnityBehaviour.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Start a Co-Routine in Unity
            </summary>
        </member>
        <member name="T:Jukebox.UnityAudioLoadState">
            <summary>
            Value describing the current load state of the audio data associated with an
            AudioClip.
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioLoadState.Unloaded">
            <summary>
            Value returned by AudioClip.loadState for an AudioClip that has no audio data 
            loaded and where loading has not been initiated yet.
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioLoadState.Loading">
            <summary>
            Value returned by AudioClip.loadState for an AudioClip that is currently loading audio data.
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioLoadState.Loaded">
            <summary>
            Value returned by AudioClip.loadState for an AudioClip that has succeeded loading its audio data.
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioLoadState.Failed">
            <summary>
            Value returned by AudioClip.loadState for an AudioClip that has failed loading its audio data.
            </summary>
        </member>
        <member name="T:Jukebox.UnityAudioType">
            <summary>
            Type of the imported(native) data.
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioType.UNKNOWN">
            <summary>
            3rd party / unknown plugin format.
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioType.ACC">
            <summary>
            Acc - not supported.
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioType.AIFF">
            <summary>
            AIFF
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioType.IT">
            <summary>
            Impulse Tracker
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioType.MOD">
            <summary>
            Protracker / Fasttracker MOD.
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioType.MPEG">
            <summary>
            MP2/MP3 MPEG.
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioType.OGGVORBIS">
            <summary>
            Ogg vorbis.
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioType.S3M">
            <summary>
            ScreamTracker 3.
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioType.WAV">
            <summary>
            Microsoft WAV.
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioType.XM">
            <summary>
            FastTracker 2 XM.
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioType.XMA">
            <summary>
            Xbox360 XMA.
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioType.VAG">
            <summary>
            VAG.
            </summary>
        </member>
        <member name="F:Jukebox.UnityAudioType.AUDIOQUEUE">
            <summary>
            iPhone hardware decoder, supports AAC, ALAC and MP3. Extracodecdata is a pointer
            to an FMOD_AUDIOQUEUE_EXTRACODECDATA structure.
            </summary>
        </member>
        <member name="T:Jukebox.IUnityAudioClip">
            <summary>
            IUnityAudioClip: an implementation of this interface provides functionality
            for loading and querying information about a downloaded audio clip
            </summary>
        </member>
        <member name="P:Jukebox.IUnityAudioClip.loadState">
            <summary>
            Return the load state of this clip (if it can be determined)
            </summary>
        </member>
        <member name="P:Jukebox.IUnityAudioClip.length">
            <summary>
            Return the length, in seconds
            </summary>
        </member>
        <member name="M:Jukebox.IUnityAudioClip.LoadAudioData">
            <summary>
            Load the audio data
            </summary>
        </member>
        <member name="T:Jukebox.IUnityAudioSource">
            <summary>
            IUnityAudioSource: an implementation of this interface provides functionality
            for controlling a Unity AudioSource
            </summary>
        </member>
        <member name="P:Jukebox.IUnityAudioSource.clip">
            <summary>
            Assign or query the currently assigned AudioClip for this audio source
            </summary>
        </member>
        <member name="P:Jukebox.IUnityAudioSource.time">
            <summary>
            Get or set the current playback position in seconds
            </summary>
        </member>
        <member name="M:Jukebox.IUnityAudioSource.Play">
            <summary>
            Play the assigned clip
            </summary>
        </member>
        <member name="M:Jukebox.IUnityAudioSource.Stop">
            <summary>
            Stop playing the assigned clip
            </summary>
        </member>
        <member name="M:Jukebox.IUnityAudioSource.Pause">
            <summary>
            Pause playback
            </summary>
        </member>
        <member name="M:Jukebox.IUnityAudioSource.UnPause">
            <summary>
            Un-Pause previously paused playback
            </summary>
        </member>
    </members>
</doc>
